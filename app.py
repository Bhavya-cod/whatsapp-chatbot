import os
from flask import Flask, request
from twilio.twiml.messaging_response import MessagingResponse
import pandas as pd

app = Flask(__name__)

# Load pesticide dataset
FILE_PATH = "pesticides.xlsx"
data_sheets = {}
if os.path.exists(FILE_PATH):
    xls = pd.ExcelFile(FILE_PATH)
    data_sheets = {sheet: pd.read_excel(xls, sheet_name=sheet) for sheet in xls.sheet_names}

# English-to-Telugu pesticide translation dictionary
pesticide_translation = {
    "Glyphosate": "‡∞ó‡±ç‡∞≤‡±à‡∞´‡±ã‡∞∏‡±á‡∞ü‡±ç",
    "Chlorpyrifos": "‡∞ï‡±ç‡∞≤‡±ã‡∞∞‡±ç‡∞™‡±à‡∞∞‡∞ø‡∞´‡±ã‡∞∏‡±ç",
    "Carbendazim": "‡∞ï‡∞æ‡∞∞‡±ç‡∞¨‡±Ü‡∞Ç‡∞°‡∞æ‡∞ú‡∞ø‡∞Æ‡±ç",
    "Imidacloprid": "‡∞á‡∞Æ‡∞ø‡∞°‡∞æ‡∞ï‡±ç‡∞≤‡±ã‡∞™‡±ç‡∞∞‡∞ø‡∞°‡±ç",
    "Mancozeb": "‡∞Æ‡±ç‡∞Ø‡∞æ‡∞Ç‡∞ï‡±ã‡∞ú‡±Ü‡∞¨‡±ç",
    "Monocrotophos": "‡∞Æ‡±ã‡∞®‡±ã‡∞ï‡±ç‡∞∞‡±ã‡∞ü‡±ã‡∞´‡±ã‡∞∏‡±ç",
}

# User session tracking
user_sessions = {}

# Language dictionary
responses = {
    "en": {
        "greeting": "üëã Hello farmer! Reply with your language: \n1‚É£ English \n2‚É£ ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å",
        "ask_crop": "üå± Enter your crop name:",
        "ask_category": "üóÇ Select a pesticide category (reply with number):",
        "ask_pesticide1": "üìå Select a pesticide (reply with number):",
        "ask_pesticide2": "üìå Select another pesticide (reply with number):",
        "compatibility": "üß™ {} and {} are *{}*. ‚úÖ\n\n‚ö†Ô∏è *Precautions:*\n"
                         "1Ô∏è‚É£ Read Labels ‚Äì Always check pesticide labels for compatibility instructions.\n"
                         "2Ô∏è‚É£ Perform a Jar Test ‚Äì Mix small amounts in a container to check for separation or reactions.\n"
                         "3Ô∏è‚É£ Follow Mixing Order (WALES) ‚Äì Wettable powders first, then liquids, then emulsifiables.",
        "no_data": "‚ö†Ô∏è No compatibility data found for this combination.",
        "restart": "üîÑ Type *restart* to check another combination.",
    },
    "te": {
        "greeting": "üëã ‡∞π‡∞≤‡±ã ‡∞∞‡±à‡∞§‡±Å! ‡∞Æ‡±Ä ‡∞≠‡∞æ‡∞∑‡∞®‡±Å ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø: \n1‚É£ English \n2‚É£ ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å",
        "ask_crop": "üå± ‡∞Æ‡±Ä ‡∞™‡∞Ç‡∞ü ‡∞™‡±á‡∞∞‡±Å ‡∞á‡∞µ‡±ç‡∞µ‡∞Ç‡∞°‡∞ø:",
        "ask_category": "üóÇ ‡∞™‡±Ü‡∞∏‡±ç‡∞ü‡∞ø‡∞∏‡±à‡∞°‡±ç ‡∞µ‡∞∞‡±ç‡∞ó‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø (‡∞∏‡∞Ç‡∞ñ‡±ç‡∞Ø‡∞§‡±ã ‡∞™‡±ç‡∞∞‡∞§‡±ç‡∞Ø‡±Å‡∞§‡±ç‡∞§‡∞∞‡∞Ç ‡∞á‡∞µ‡±ç‡∞µ‡∞Ç‡∞°‡∞ø):",
        "ask_pesticide1": "üìå ‡∞í‡∞ï ‡∞™‡±Ü‡∞∏‡±ç‡∞ü‡∞ø‡∞∏‡±à‡∞°‡±ç ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø (‡∞∏‡∞Ç‡∞ñ‡±ç‡∞Ø‡∞§‡±ã ‡∞™‡±ç‡∞∞‡∞§‡±ç‡∞Ø‡±Å‡∞§‡±ç‡∞§‡∞∞‡∞Ç ‡∞á‡∞µ‡±ç‡∞µ‡∞Ç‡∞°‡∞ø):",
        "ask_pesticide2": "üìå ‡∞Æ‡∞∞‡±ä‡∞ï ‡∞™‡±Ü‡∞∏‡±ç‡∞ü‡∞ø‡∞∏‡±à‡∞°‡±ç ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø (‡∞∏‡∞Ç‡∞ñ‡±ç‡∞Ø‡∞§‡±ã ‡∞™‡±ç‡∞∞‡∞§‡±ç‡∞Ø‡±Å‡∞§‡±ç‡∞§‡∞∞‡∞Ç ‡∞á‡∞µ‡±ç‡∞µ‡∞Ç‡∞°‡∞ø):",
        "compatibility": "üß™ {} ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å {} *{}* ‡∞ó‡∞æ ‡∞â‡∞®‡±ç‡∞®‡∞æ‡∞Ø‡∞ø. ‚úÖ\n\n‚ö†Ô∏è *‡∞ú‡∞æ‡∞ó‡±ç‡∞∞‡∞§‡±ç‡∞§‡∞≤‡±Å:*\n"
                         "1Ô∏è‚É£ ‡∞≤‡±á‡∞¨‡±Å‡∞≥‡±ç‡∞≤‡±Å ‡∞ö‡∞¶‡∞µ‡∞Ç‡∞°‡∞ø ‚Äì ‡∞™‡±ä‡∞∞‡∞™‡∞æ‡∞ü‡±ç‡∞≤‡±Å ‡∞≤‡±á‡∞ï‡±Å‡∞Ç‡∞°‡∞æ ‡∞™‡±Ü‡∞∏‡±ç‡∞ü‡∞ø‡∞∏‡±à‡∞°‡±ç ‡∞≤‡±á‡∞¨‡±Å‡∞≥‡±ç‡∞≤‡∞®‡±Å ‡∞™‡∞∞‡∞ø‡∞∂‡±Ä‡∞≤‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø.\n"
                         "2Ô∏è‚É£ ‡∞ú‡∞æ‡∞∞‡±ç ‡∞ü‡±Ü‡∞∏‡±ç‡∞ü‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø ‚Äì ‡∞ö‡∞ø‡∞®‡±ç‡∞® ‡∞™‡∞∞‡∞ø‡∞Æ‡∞æ‡∞£‡∞æ‡∞≤‡∞®‡±Å ‡∞ï‡∞≤‡∞ø‡∞™‡∞ø ‡∞µ‡∞ø‡∞≠‡∞ú‡∞® ‡∞≤‡±á‡∞¶‡∞æ ‡∞™‡±ç‡∞∞‡∞§‡∞ø‡∞ö‡∞∞‡±ç‡∞Ø‡∞≤‡±Å ‡∞â‡∞®‡±ç‡∞®‡∞æ‡∞Ø‡∞æ ‡∞ö‡±Ç‡∞°‡∞Ç‡∞°‡∞ø.\n"
                         "3Ô∏è‚É£ ‡∞ï‡∞≤‡∞Ø‡∞ø‡∞ï ‡∞ï‡±ç‡∞∞‡∞Æ‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞Ö‡∞®‡±Å‡∞∏‡∞∞‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø (WALES) ‚Äì ‡∞Æ‡±Å‡∞Ç‡∞¶‡±Å‡∞ó‡∞æ ‡∞µ‡±Ü‡∞ü‡∞ø‡∞¨‡±Å‡∞≤‡±ç ‡∞™‡±å‡∞°‡∞∞‡±ç‡∞≤‡±Å, ‡∞§‡∞∞‡±Å‡∞µ‡∞æ‡∞§ ‡∞≤‡∞ø‡∞ï‡±ç‡∞µ‡∞ø‡∞°‡±ç‡∞≤‡±Å, ‡∞ö‡∞ø‡∞µ‡∞∞‡∞ó‡∞æ ‡∞é‡∞Æ‡∞≤‡±ç‡∞∏‡∞ø‡∞´‡±à‡∞Ø‡∞¨‡±Å‡∞≤‡±ç‡∞∏‡±ç.",
        "no_data": "‚ö†Ô∏è ‡∞à ‡∞ï‡∞≤‡∞Ø‡∞ø‡∞ï ‡∞ï‡±ã‡∞∏‡∞Ç ‡∞°‡±á‡∞ü‡∞æ ‡∞≤‡±á‡∞¶‡±Å.",
        "restart": "üîÑ ‡∞Æ‡∞∞‡±ã‡∞∏‡∞æ‡∞∞‡∞ø ‡∞™‡±ç‡∞∞‡∞Ø‡∞§‡±ç‡∞®‡∞ø‡∞Ç‡∞ö‡±á‡∞Ç‡∞¶‡±Å‡∞ï‡±Å *restart* ‡∞ü‡±à‡∞™‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø.",
    }
}

@app.route("/")
def home():
    return "Pesticide Chatbot is Running!"

@app.route("/whatsapp", methods=["POST"])
def whatsapp_bot():
    incoming_msg = request.values.get("Body", "").strip()
    sender = request.values.get("From", "")

    if sender not in user_sessions or incoming_msg.lower() == "restart":
        user_sessions[sender] = {"step": "language"}

    session = user_sessions[sender]
    resp = MessagingResponse()
    msg = resp.message()

    if session["step"] == "language":
        if incoming_msg in ["1", "2"]:
            session["lang"] = "en" if incoming_msg == "1" else "te"
            session["step"] = "crop"
            msg.body(responses[session["lang"]]["ask_crop"])
        else:
            msg.body(responses["en"]["greeting"])

    elif session["step"] == "crop":
        session["crop"] = incoming_msg
        session["step"] = "category"
        categories = list(data_sheets.keys()) if data_sheets else []
        session["categories"] = categories
        if categories:
            msg.body(responses[session["lang"]]["ask_category"] + "\n" + 
                     "\n".join([f"{i+1}. {c}" for i, c in enumerate(categories)]))
        else:
            msg.body("‚ö†Ô∏è No pesticide data available. Please upload `pesticides.xlsx`.")

    elif session["step"] == "category":
        try:
            index = int(incoming_msg) - 1
            if 0 <= index < len(session["categories"]):
                session["selected_sheet"] = session["categories"][index]
                session["step"] = "pesticide1"
                df = data_sheets[session["selected_sheet"]]
                pesticides = df.iloc[:, 1].dropna().unique().tolist()
                
                session["pesticides1"] = pesticides
                display_names = [pesticide_translation.get(p, p) for p in pesticides] if session["lang"] == "te" else pesticides
                
                msg.body(responses[session["lang"]]["ask_pesticide1"] + "\n" + 
                         "\n".join([f"{i+1}. {p}" for i, p in enumerate(display_names)]))
            else:
                msg.body(responses[session["lang"]]["ask_category"])
        except ValueError:
            msg.body(responses[session["lang"]]["ask_category"])

    elif session["step"] == "pesticide1":
        try:
            index = int(incoming_msg) - 1
            session["pesticide1"] = session["pesticides1"][index]
            session["step"] = "pesticide2"
            df = data_sheets[session["selected_sheet"]]
            pesticides = df.iloc[:, 2].dropna().unique().tolist()
            
            session["pesticides2"] = pesticides
            display_names = [pesticide_translation.get(p, p) for p in pesticides] if session["lang"] == "te" else pesticides

            msg.body(responses[session["lang"]]["ask_pesticide2"] + "\n" + 
                     "\n".join([f"{i+1}. {p}" for i, p in enumerate(display_names)]))
        except:
            msg.body(responses[session["lang"]]["ask_pesticide1"])

    elif session["step"] == "pesticide2":
        try:
            index = int(incoming_msg) - 1
            session["pesticide2"] = session["pesticides2"][index]
            session["step"] = "restart"
            df = data_sheets[session["selected_sheet"]]
            match = df[(df.iloc[:, 1] == session["pesticide1"]) & 
                       (df.iloc[:, 2] == session["pesticide2"])]

            p1_display = pesticide_translation.get(session["pesticide1"], session["pesticide1"])
            p2_display = pesticide_translation.get(session["pesticide2"], session["pesticide2"])

            if not match.empty:
                compatibility = match.iloc[0, 3]
                msg.body(responses[session["lang"]]["compatibility"].format(p1_display, p2_display, compatibility))
            else:
                msg.body(responses[session["lang"]]["no_data"])

            msg.body(responses[session["lang"]]["restart"])
        except:
            msg.body(responses[session["lang"]]["ask_pesticide2"])

    return str(resp)

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000, debug=True)
